#include <iostream>
#include <vector>
#include <stack>
#include <queue>
#include <chrono>
#include <omp.h>

using namespace std;

class Graph {
public:
    int vertices = 6;
    int edges = 5;
    vector<vector<int>> graph = {{1}, {0, 2, 3}, {1, 4, 5}, {1, 4}, {2, 3}, {2}};
    vector<bool> visited;

    void initialize_visited() {
        visited.assign(vertices, false);
    }

    void dfs(int i) {
        stack<int> s;
        s.push(i);
        visited[i] = true;
        while (!s.empty()) {
            int current = s.top();
            cout << current << " ";
            s.pop();
            for (int j = 0; j < graph[current].size(); ++j) {
                int vertex = graph[current][j];
                if (!visited[vertex]) {
                    s.push(vertex);
                    visited[vertex] = true;
                }
            }
        }
    }

    static void parallel_dfs(Graph& g, int i) {
        stack<int> s;
        s.push(i);
        g.visited[i] = true;
        while (!s.empty()) {
            int current = s.top();
            cout << current << " ";
            s.pop();
            #pragma omp parallel for
            for (int j = 0; j < g.graph[current].size(); ++j) {
                int vertex = g.graph[current][j];
                if (!g.visited[vertex]) {
                    #pragma omp critical
                    {
                        s.push(vertex);
                        g.visited[vertex] = true;
                    }
                }
            }
        }
    }

    void bfs(int i) {
        queue<int> q;
        q.push(i);
        visited[i] = true;
        while (!q.empty()) {
            int current = q.front();
            cout << current << " ";
            q.pop();
            for (int j = 0; j < graph[current].size(); ++j) {
                int vertex = graph[current][j];
                if (!visited[vertex]) {
                    q.push(vertex);
                    visited[vertex] = true;
                }
            }
        }
    }

    static void parallel_bfs(Graph& g, int i) {
        queue<int> q;
        q.push(i);
        g.visited[i] = true;
        while (!q.empty()) {
            int current = q.front();
            cout << current << " ";
            q.pop();
            #pragma omp parallel for
            for (int j = 0; j < g.graph[current].size(); ++j) {
                int vertex = g.graph[current][j];
                if (!g.visited[vertex]) {
                    #pragma omp critical
                    {
                        q.push(vertex);
                        g.visited[vertex] = true;
                    }
                }
            }
        }
    }
};

int main(int argc, char const *argv[]) {
    Graph g;
    cout << "Depth First Search: \n";
    auto start = chrono::high_resolution_clock::now();
    g.initialize_visited();
    g.dfs(0);
    cout << endl;
    auto end = chrono::high_resolution_clock::now();
    cout << "Time taken: " << chrono::duration_cast<chrono::microseconds>(end - start).count() << " microseconds" << endl;

    cout << "Parallel Depth First Search: \n";
    start = chrono::high_resolution_clock::now();
    g.initialize_visited();
    Graph::parallel_dfs(g, 0);
    cout << endl;
    end = chrono::high_resolution_clock::now();
    cout << "Time taken: "<< chrono::duration_cast<chrono::microseconds>(end - start).count() << " microseconds" << endl;

    cout << "Breadth First Search: \n";
    start = chrono::high_resolution_clock::now();
    g.initialize_visited();
    g.bfs(0);
    cout << endl;
    end = chrono::high_resolution_clock::now();
    cout << "Time taken: "<< chrono::duration_cast<chrono::microseconds>(end - start).count() << " microseconds" << endl;

    cout << "Parallel Breadth First Search: \n";
    start = chrono::high_resolution_clock::now();
    g.initialize_visited();
    Graph::parallel_bfs(g, 0);
    cout << endl;
    end = chrono::high_resolution_clock::now();
    cout << "Time taken: " << chrono::duration_cast<chrono::microseconds>(end - start).count() << " microseconds" << endl;

    return 0;
}
