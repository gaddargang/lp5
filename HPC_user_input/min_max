#include<iostream>
#include<omp.h>

using namespace std;

int minval(int arr[], int n){
    int minval = arr[0];
  
    for(int i = 0; i < n; i++){
        if(arr[i] < minval) minval = arr[i];
    }
    return minval;
}

int pminval(int arr[], int n){
    int minval = arr[0];
    #pragma omp parallel for reduction(min : minval)
    for(int i = 0; i < n; i++){
        if(arr[i] < minval) minval = arr[i];
    }
    return minval;
}

int maxval(int arr[], int n){
    int maxval = arr[0];
  
    for(int i = 0; i < n; i++){
        if(arr[i] > maxval) maxval = arr[i];
    }
    return maxval;
}

int pmaxval(int arr[], int n){
    int maxval = arr[0];
    #pragma omp parallel for reduction(max : maxval)
    for(int i = 0; i < n; i++){
        if(arr[i] > maxval) maxval = arr[i];
    }
    return maxval;
}

int sum(int arr[], int n){
    int sum = 0;
    #pragma omp parallel for reduction(+ : sum)
    for(int i = 0; i < n; i++){
        sum += arr[i];
    }
    return sum;
}

int psum(int arr[], int n){
    int sum = 0;
    #pragma omp parallel for reduction(+ : sum)
    for(int i = 0; i < n; i++){
        sum += arr[i];
    }
    return sum;
}

int average(int arr[], int n){
    return (double)sum(arr, n) / n;
}

int paverage(int arr[], int n){
    return (double)psum(arr, n) / n;
}

int main(){
    int n;
    cout << "Enter the number of elements in the array: ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }
  
    double start,end;
    start = omp_get_wtime();
    cout << "The minimum value is: " << minval(arr, n) << '\n';
    end = omp_get_wtime();
    cout << "Time Taken Sequential: " << (end-start) << endl;
  
    start = omp_get_wtime();
    cout << "The minimum value is: " << pminval(arr, n) << '\n';
    end = omp_get_wtime();
    cout << "Time Taken Parallel: " << (end-start) << endl;
  
    start = omp_get_wtime();
    cout << "The maximum value is: " << maxval(arr, n) << '\n';
    end = omp_get_wtime();
    cout << "Time Taken Sequential: " << (end-start) << endl;
  
    start = omp_get_wtime();
    cout << "The maximum value is: " << pmaxval(arr, n) << '\n';
    end = omp_get_wtime();
    cout << "Time Taken Parallel: " << (end-start) << endl;
  
    start = omp_get_wtime();
    cout << "The sum is: " << sum(arr, n) << '\n';
    end = omp_get_wtime();
    cout << "Time Taken Sequential: " << (end-start) << endl;
  
    start = omp_get_wtime();
    cout << "The sum is: " << psum(arr, n) << '\n';
    end = omp_get_wtime();
    cout << "Time Taken Parallel: " << (end-start) << endl;
  
    start = omp_get_wtime();
    cout << "The average value is: " << average(arr, n) << '\n';
    end = omp_get_wtime();
    cout << "Time Taken Sequential: " << (end-start) << endl;
  
    start = omp_get_wtime();
    cout << "The average value is: " << paverage(arr, n) << '\n';
    end = omp_get_wtime();
    cout << "Time Taken Parallel: " << (end-start) << endl;

    return 0;
}
